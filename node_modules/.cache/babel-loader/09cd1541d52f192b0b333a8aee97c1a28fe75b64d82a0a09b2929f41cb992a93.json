{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { ActionCreatorTitle, apiConstants, STRING } from \"@/constants\";\nimport axiosInstance from \"@/app/axiosInstance\";\nimport { setDataToLocalStorage } from \"@/utils\";\n\n/* The `initialState` constant is defining the initial state of the `AuthState` slice of the Redux\nstore. It has three properties: */\n\nconst initialState = {\n  loading: false,\n  error: null,\n  user: []\n};\n\n/* The `export const loginUser = createAsyncThunk()` function is creating an asynchronous thunk action\ncreator called `loginUser`. Thunk actions are a way to handle asynchronous logic in Redux. */\n\nexport const loginUser = createAsyncThunk(ActionCreatorTitle.AUTH_LOGIN, async loginCredential => {\n  const {\n    data\n  } = await axiosInstance.post(apiConstants.LOGIN, loginCredential);\n  setDataToLocalStorage(STRING.USERDETAILS, data);\n  return data;\n});\nconst authSlice = createSlice({\n  name: STRING.USER,\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.loading = true;\n      state.user = [];\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      toast.success(\"Login Successfully\");\n      state.loading = false;\n      state.user = action.payload;\n      state.error = null;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.loading = false;\n      state.user = [];\n      if (action.error.message === STRING.REQUESTFAILED400) {\n        state.error = STRING.ACCESSDENIED;\n        toast.error(STRING.ACCESSDENIED);\n      } else {\n        toast.error(action.error.message);\n        state.error = action.error.message || null;\n      }\n    });\n  },\n  reducers: {}\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","toast","ActionCreatorTitle","apiConstants","STRING","axiosInstance","setDataToLocalStorage","initialState","loading","error","user","loginUser","AUTH_LOGIN","loginCredential","data","post","LOGIN","USERDETAILS","authSlice","name","USER","extraReducers","builder","addCase","pending","state","fulfilled","action","success","payload","rejected","message","REQUESTFAILED400","ACCESSDENIED","reducers","reducer"],"sources":["/Users/Vishal/Documents/ANCKR Codebase/react/src/features/auth/authSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { AuthState, User } from \"src/interface\";\nimport { ActionCreatorTitle, apiConstants, STRING } from \"@/constants\";\nimport axiosInstance from \"@/app/axiosInstance\";\nimport { setDataToLocalStorage } from \"@/utils\";\n\n/* The `initialState` constant is defining the initial state of the `AuthState` slice of the Redux\nstore. It has three properties: */\n\nconst initialState: AuthState = {\n\tloading: false,\n\terror: null,\n\tuser: [],\n};\n\n/* The `export const loginUser = createAsyncThunk()` function is creating an asynchronous thunk action\ncreator called `loginUser`. Thunk actions are a way to handle asynchronous logic in Redux. */\n\nexport const loginUser = createAsyncThunk(\n\tActionCreatorTitle.AUTH_LOGIN,\n\tasync (loginCredential: { username: string; password: string }) => {\n\t\tconst { data } = await axiosInstance.post(apiConstants.LOGIN, loginCredential);\n\t\tsetDataToLocalStorage(STRING.USERDETAILS, data);\n\t\treturn data;\n\t},\n);\n\nconst authSlice = createSlice({\n\tname: STRING.USER,\n\tinitialState,\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(loginUser.pending, (state) => {\n\t\t\t\tstate.loading = true;\n\t\t\t\tstate.user = [];\n\t\t\t\tstate.error = null;\n\t\t\t})\n\t\t\t.addCase(loginUser.fulfilled, (state, action: PayloadAction<Array<User>>) => {\n\t\t\t\ttoast.success(\"Login Successfully\");\n\t\t\t\tstate.loading = false;\n\t\t\t\tstate.user = action.payload;\n\t\t\t\tstate.error = null;\n\t\t\t})\n\t\t\t.addCase(loginUser.rejected, (state, action) => {\n\t\t\t\tstate.loading = false;\n\t\t\t\tstate.user = [];\n\t\t\t\tif (action.error.message === STRING.REQUESTFAILED400) {\n\t\t\t\t\tstate.error = STRING.ACCESSDENIED;\n\t\t\t\t\ttoast.error(STRING.ACCESSDENIED);\n\t\t\t\t} else {\n\t\t\t\t\ttoast.error(action.error.message);\n\t\t\t\t\tstate.error = action.error.message || null;\n\t\t\t\t}\n\t\t\t});\n\t},\n\treducers: {},\n});\n\nexport default authSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAC/E,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,kBAAkB,EAAEC,YAAY,EAAEC,MAAM,QAAQ,aAAa;AACtE,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,SAASC,qBAAqB,QAAQ,SAAS;;AAE/C;AACA;;AAEA,MAAMC,YAAuB,GAAG;EAC/BC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE;AACP,CAAC;;AAED;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGZ,gBAAgB,CACxCG,kBAAkB,CAACU,UAAU,EAC7B,MAAOC,eAAuD,IAAK;EAClE,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMT,aAAa,CAACU,IAAI,CAACZ,YAAY,CAACa,KAAK,EAAEH,eAAe,CAAC;EAC9EP,qBAAqB,CAACF,MAAM,CAACa,WAAW,EAAEH,IAAI,CAAC;EAC/C,OAAOA,IAAI;AACZ,CACD,CAAC;AAED,MAAMI,SAAS,GAAGlB,WAAW,CAAC;EAC7BmB,IAAI,EAAEf,MAAM,CAACgB,IAAI;EACjBb,YAAY;EACZc,aAAa,EAAGC,OAAO,IAAK;IAC3BA,OAAO,CACLC,OAAO,CAACZ,SAAS,CAACa,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACjB,OAAO,GAAG,IAAI;MACpBiB,KAAK,CAACf,IAAI,GAAG,EAAE;MACfe,KAAK,CAAChB,KAAK,GAAG,IAAI;IACnB,CAAC,CAAC,CACDc,OAAO,CAACZ,SAAS,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAkC,KAAK;MAC5E1B,KAAK,CAAC2B,OAAO,CAAC,oBAAoB,CAAC;MACnCH,KAAK,CAACjB,OAAO,GAAG,KAAK;MACrBiB,KAAK,CAACf,IAAI,GAAGiB,MAAM,CAACE,OAAO;MAC3BJ,KAAK,CAAChB,KAAK,GAAG,IAAI;IACnB,CAAC,CAAC,CACDc,OAAO,CAACZ,SAAS,CAACmB,QAAQ,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACjB,OAAO,GAAG,KAAK;MACrBiB,KAAK,CAACf,IAAI,GAAG,EAAE;MACf,IAAIiB,MAAM,CAAClB,KAAK,CAACsB,OAAO,KAAK3B,MAAM,CAAC4B,gBAAgB,EAAE;QACrDP,KAAK,CAAChB,KAAK,GAAGL,MAAM,CAAC6B,YAAY;QACjChC,KAAK,CAACQ,KAAK,CAACL,MAAM,CAAC6B,YAAY,CAAC;MACjC,CAAC,MAAM;QACNhC,KAAK,CAACQ,KAAK,CAACkB,MAAM,CAAClB,KAAK,CAACsB,OAAO,CAAC;QACjCN,KAAK,CAAChB,KAAK,GAAGkB,MAAM,CAAClB,KAAK,CAACsB,OAAO,IAAI,IAAI;MAC3C;IACD,CAAC,CAAC;EACJ,CAAC;EACDG,QAAQ,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,eAAehB,SAAS,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}