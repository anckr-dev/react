{"ast":null,"code":"var _jsxFileName = \"/Users/Vishal/Documents/ANCKR Codebase/react/src/components/shared/common/CheckboxElement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckboxElement = ({\n  label,\n  initialState,\n  onCheckboxChange,\n  wrapperClass,\n  isGreen\n}) => {\n  _s();\n  const [checked, setChecked] = useState(initialState);\n  const handleCheckboxChange = () => {\n    const newChecked = !checked;\n    setChecked(newChecked);\n    if (onCheckboxChange) {\n      onCheckboxChange(newChecked);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `checkbox-wrapper ${isGreen ? \"green-checkbox\" : \"black-checkbox\"} ${wrapperClass}`,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: checked,\n      onChange: handleCheckboxChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n};\n_s(CheckboxElement, \"NB/rrlzg7mAle0hpvqogUaTeVvc=\");\n_c = CheckboxElement;\nexport default CheckboxElement;\nvar _c;\n$RefreshReg$(_c, \"CheckboxElement\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CheckboxElement","label","initialState","onCheckboxChange","wrapperClass","isGreen","_s","checked","setChecked","handleCheckboxChange","newChecked","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Vishal/Documents/ANCKR Codebase/react/src/components/shared/common/CheckboxElement.tsx"],"sourcesContent":["import { CheckboxElementProps } from \"@/interface\";\nimport React, { useState } from \"react\";\n\nconst CheckboxElement: React.FC<CheckboxElementProps> = ({\n\tlabel,\n\tinitialState,\n\tonCheckboxChange,\n\twrapperClass,\n\tisGreen,\n}) => {\n\tconst [checked, setChecked] = useState<boolean>(initialState);\n\n\tconst handleCheckboxChange = () => {\n\t\tconst newChecked = !checked;\n\t\tsetChecked(newChecked);\n\t\tif (onCheckboxChange) {\n\t\t\tonCheckboxChange(newChecked);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={`checkbox-wrapper ${isGreen ? \"green-checkbox\" : \"black-checkbox\"} ${wrapperClass}`}>\n\t\t\t<input type=\"checkbox\" checked={checked} onChange={handleCheckboxChange} />\n\t\t\t<label>{label}</label>\n\t\t</div>\n\t);\n};\n\nexport default CheckboxElement;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAA+C,GAAGA,CAAC;EACxDC,KAAK;EACLC,YAAY;EACZC,gBAAgB;EAChBC,YAAY;EACZC;AACD,CAAC,KAAK;EAAAC,EAAA;EACL,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAUK,YAAY,CAAC;EAE7D,MAAMO,oBAAoB,GAAGA,CAAA,KAAM;IAClC,MAAMC,UAAU,GAAG,CAACH,OAAO;IAC3BC,UAAU,CAACE,UAAU,CAAC;IACtB,IAAIP,gBAAgB,EAAE;MACrBA,gBAAgB,CAACO,UAAU,CAAC;IAC7B;EACD,CAAC;EAED,oBACCX,OAAA;IAAKY,SAAS,EAAG,oBAAmBN,OAAO,GAAG,gBAAgB,GAAG,gBAAiB,IAAGD,YAAa,EAAE;IAAAQ,QAAA,gBACnGb,OAAA;MAAOc,IAAI,EAAC,UAAU;MAACN,OAAO,EAAEA,OAAQ;MAACO,QAAQ,EAAEL;IAAqB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3EnB,OAAA;MAAAa,QAAA,EAAQX;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAER,CAAC;AAACZ,EAAA,CAvBIN,eAA+C;AAAAmB,EAAA,GAA/CnB,eAA+C;AAyBrD,eAAeA,eAAe;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}