{"ast":null,"code":"import { toast } from \"react-toastify\";\nexport const setDataToLocalStorage = (key, data) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n  } catch (error) {\n    console.error(\"Error setting data in localStorage:\", error);\n  }\n};\n\n/**\n * The function `getDataFromLocalStorage` retrieves data from the localStorage using a specified key\n * and returns it as a parsed JSON object, or null if the data does not exist or an error occurs.\n * @param {string} key - The `key` parameter is a string that represents the key under which the data\n * is stored in the localStorage.\n * @returns the data retrieved from localStorage, parsed as JSON, if it exists. If the data does not\n * exist or there is an error, it returns null.\n */\n\nexport const getDataFromLocalStorage = key => {\n  try {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return JSON.parse(data);\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error getting data from localStorage:\", error);\n    return null;\n  }\n};\n\n/**\n * The function `clearLocalStorageByKey` removes an item from the localStorage using the provided key.\n * @param {string} key - The `key` parameter is a string that represents the key of the item you want\n * to remove from the localStorage.\n */\n\nexport const clearLocalStorageByKey = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error clearing localStorage item with key \"${key}\":`, error);\n  }\n};\n\n/**\n * The function `getQueryParam` retrieves the value of a query parameter from the current URL.\n * @param {string} paramName - The `paramName` parameter is a string that represents the name of the\n * query parameter you want to retrieve from the URL.\n * @returns The function `getQueryParam` returns a string value if the query parameter with the\n * specified `paramName` exists in the URL. If the parameter does not exist or if there is an error\n * while getting the parameter, the function returns `null`.\n */\nexport const getQueryParam = paramName => {\n  try {\n    const params = new URLSearchParams(window.location.search);\n    return params.get(paramName);\n  } catch (error) {\n    console.error(`Error while getting query parameter \"${paramName}\": ${error}`);\n    return null;\n  }\n};\n\n/**\n * The above code defines two functions in TypeScript that display error and success messages using a\n * toast library.\n * @param {string} message - The `message` parameter is a string that represents the message to be\n * displayed in the toast notification.\n */\nexport const showToastError = message => {\n  toast.error(message);\n};\nexport const showToastSuccess = message => {\n  toast.success(message);\n};","map":{"version":3,"names":["toast","setDataToLocalStorage","key","data","localStorage","setItem","JSON","stringify","error","console","getDataFromLocalStorage","getItem","parse","clearLocalStorageByKey","removeItem","getQueryParam","paramName","params","URLSearchParams","window","location","search","get","showToastError","message","showToastSuccess","success"],"sources":["/Users/Vishal/Documents/ANCKR Codebase/react/src/utils/helper.ts"],"sourcesContent":["import { toast } from \"react-toastify\";\n\nexport const setDataToLocalStorage = <T>(key: string, data: T): void => {\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(data));\n\t} catch (error) {\n\t\tconsole.error(\"Error setting data in localStorage:\", error);\n\t}\n};\n\n/**\n * The function `getDataFromLocalStorage` retrieves data from the localStorage using a specified key\n * and returns it as a parsed JSON object, or null if the data does not exist or an error occurs.\n * @param {string} key - The `key` parameter is a string that represents the key under which the data\n * is stored in the localStorage.\n * @returns the data retrieved from localStorage, parsed as JSON, if it exists. If the data does not\n * exist or there is an error, it returns null.\n */\n\nexport const getDataFromLocalStorage = (key: string) => {\n\ttry {\n\t\tconst data = localStorage.getItem(key);\n\t\tif (data) {\n\t\t\treturn JSON.parse(data);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(\"Error getting data from localStorage:\", error);\n\t\treturn null;\n\t}\n};\n\n/**\n * The function `clearLocalStorageByKey` removes an item from the localStorage using the provided key.\n * @param {string} key - The `key` parameter is a string that represents the key of the item you want\n * to remove from the localStorage.\n */\n\nexport const clearLocalStorageByKey = (key: string) => {\n\ttry {\n\t\tlocalStorage.removeItem(key);\n\t} catch (error) {\n\t\tconsole.error(`Error clearing localStorage item with key \"${key}\":`, error);\n\t}\n};\n\n/**\n * The function `getQueryParam` retrieves the value of a query parameter from the current URL.\n * @param {string} paramName - The `paramName` parameter is a string that represents the name of the\n * query parameter you want to retrieve from the URL.\n * @returns The function `getQueryParam` returns a string value if the query parameter with the\n * specified `paramName` exists in the URL. If the parameter does not exist or if there is an error\n * while getting the parameter, the function returns `null`.\n */\nexport const getQueryParam = (paramName: string): string | null => {\n\ttry {\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\treturn params.get(paramName);\n\t} catch (error) {\n\t\tconsole.error(`Error while getting query parameter \"${paramName}\": ${error}`);\n\t\treturn null;\n\t}\n};\n\n/**\n * The above code defines two functions in TypeScript that display error and success messages using a\n * toast library.\n * @param {string} message - The `message` parameter is a string that represents the message to be\n * displayed in the toast notification.\n */\nexport const showToastError = (message: string) => {\n\ttoast.error(message);\n};\n\nexport const showToastSuccess = (message: string) => {\n\ttoast.success(message);\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,MAAMC,qBAAqB,GAAGA,CAAIC,GAAW,EAAEC,IAAO,KAAW;EACvE,IAAI;IACHC,YAAY,CAACC,OAAO,CAACH,GAAG,EAAEI,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;EAChD,CAAC,CAAC,OAAOK,KAAK,EAAE;IACfC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC5D;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,uBAAuB,GAAIR,GAAW,IAAK;EACvD,IAAI;IACH,MAAMC,IAAI,GAAGC,YAAY,CAACO,OAAO,CAACT,GAAG,CAAC;IACtC,IAAIC,IAAI,EAAE;MACT,OAAOG,IAAI,CAACM,KAAK,CAACT,IAAI,CAAC;IACxB,CAAC,MAAM;MACN,OAAO,IAAI;IACZ;EACD,CAAC,CAAC,OAAOK,KAAK,EAAE;IACfC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,OAAO,IAAI;EACZ;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMK,sBAAsB,GAAIX,GAAW,IAAK;EACtD,IAAI;IACHE,YAAY,CAACU,UAAU,CAACZ,GAAG,CAAC;EAC7B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACfC,OAAO,CAACD,KAAK,CAAE,8CAA6CN,GAAI,IAAG,EAAEM,KAAK,CAAC;EAC5E;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,aAAa,GAAIC,SAAiB,IAAoB;EAClE,IAAI;IACH,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC1D,OAAOJ,MAAM,CAACK,GAAG,CAACN,SAAS,CAAC;EAC7B,CAAC,CAAC,OAAOR,KAAK,EAAE;IACfC,OAAO,CAACD,KAAK,CAAE,wCAAuCQ,SAAU,MAAKR,KAAM,EAAC,CAAC;IAC7E,OAAO,IAAI;EACZ;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,cAAc,GAAIC,OAAe,IAAK;EAClDxB,KAAK,CAACQ,KAAK,CAACgB,OAAO,CAAC;AACrB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAID,OAAe,IAAK;EACpDxB,KAAK,CAAC0B,OAAO,CAACF,OAAO,CAAC;AACvB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}