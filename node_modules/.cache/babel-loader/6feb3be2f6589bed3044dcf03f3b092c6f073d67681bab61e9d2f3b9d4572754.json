{"ast":null,"code":"import { NUMBER } from \"./number\";\nimport * as Yup from \"yup\";\nimport { VALIDATION_MESSAGES } from \"./validationMessages\";\n\n/* The code is defining a validation schema using the Yup library for a login form. The schema\nspecifies the validation rules for the username and password fields. */\nexport const LOGIN_VALIDATION_SCHEMA = Yup.object({\n  username: Yup.string()\n  // .email(VALIDATION_MESSAGES.EMAIL.INVALID)\n  .max(NUMBER.TWO_FIFTY).required(VALIDATION_MESSAGES.EMAIL.REQUIRED),\n  // .matches(\n  //   /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n  //   VALIDATION_MESSAGES.EMAIL.INVALID\n  // ),\n  password: Yup.string()\n  // .min(NUMBER.EIGHT, VALIDATION_MESSAGES.PASSWORD.MIN_LENGTH)\n  .required(VALIDATION_MESSAGES.PASSWORD.REQUIRED)\n});\n\n/* The code is defining a validation schema using the Yup library for a company form. The schema\nspecifies the validation rules for the companyName and companyBio fields. */\nexport const COMPANY_VALIDATION_SCHEMA = Yup.object({\n  companyName: Yup.string().required(VALIDATION_MESSAGES.COMPANY.REQUIRED).min(NUMBER.FIVE, VALIDATION_MESSAGES.COMPANY.MIN_LENGTH),\n  companyBio: Yup.string().required(VALIDATION_MESSAGES.COMPANYBIO.REQUIRED).min(NUMBER.FIVE, VALIDATION_MESSAGES.COMPANY.MIN_LENGTH)\n});\n\n/* The code is defining a validation schema using the Yup library for changing an email address. The\nschema specifies the validation rules for the username field, which represents the new email\naddress. */\nexport const CHANGE_EMAIL_VALIDATION_SCHEMA = Yup.object({\n  email: Yup.string().email(VALIDATION_MESSAGES.EMAIL.INVALID).max(NUMBER.TWO_FIFTY).required(VALIDATION_MESSAGES.EMAIL.REQUIRED).matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i, VALIDATION_MESSAGES.EMAIL.INVALID)\n});\nexport const CHANGE_PASSWORD_VALIDATION_SCHEMA = Yup.object().shape({\n  currentPassword: Yup.string().required(\"Current password is required\"),\n  newPassword: Yup.string().required(VALIDATION_MESSAGES.NEWPASSWORD.REQUIRED).min(NUMBER.EIGHT, VALIDATION_MESSAGES.NEWPASSWORD.MIN_LENGTH).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, VALIDATION_MESSAGES.NEWPASSWORD.MATCHPATTERN),\n  confirmNewPassword: Yup.string().required(VALIDATION_MESSAGES.CONFIRMNEWPASSWORD.REQUIRED).oneOf([Yup.ref(\"newPassword\")], VALIDATION_MESSAGES.CONFIRMNEWPASSWORD.MATCHPATTERN)\n});","map":{"version":3,"names":["NUMBER","Yup","VALIDATION_MESSAGES","LOGIN_VALIDATION_SCHEMA","object","username","string","max","TWO_FIFTY","required","EMAIL","REQUIRED","password","PASSWORD","COMPANY_VALIDATION_SCHEMA","companyName","COMPANY","min","FIVE","MIN_LENGTH","companyBio","COMPANYBIO","CHANGE_EMAIL_VALIDATION_SCHEMA","email","INVALID","matches","CHANGE_PASSWORD_VALIDATION_SCHEMA","shape","currentPassword","newPassword","NEWPASSWORD","EIGHT","MATCHPATTERN","confirmNewPassword","CONFIRMNEWPASSWORD","oneOf","ref"],"sources":["/Users/Vishal/Documents/ANCKR Codebase/react/src/constants/validationSchema.ts"],"sourcesContent":["import { NUMBER } from \"./number\";\nimport * as Yup from \"yup\";\nimport { VALIDATION_MESSAGES } from \"./validationMessages\";\n\n/* The code is defining a validation schema using the Yup library for a login form. The schema\nspecifies the validation rules for the username and password fields. */\nexport const LOGIN_VALIDATION_SCHEMA = Yup.object({\n\tusername: Yup.string()\n\t\t// .email(VALIDATION_MESSAGES.EMAIL.INVALID)\n\t\t.max(NUMBER.TWO_FIFTY)\n\t\t.required(VALIDATION_MESSAGES.EMAIL.REQUIRED),\n\t// .matches(\n\t//   /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n\t//   VALIDATION_MESSAGES.EMAIL.INVALID\n\t// ),\n\tpassword: Yup.string()\n\t\t// .min(NUMBER.EIGHT, VALIDATION_MESSAGES.PASSWORD.MIN_LENGTH)\n\t\t.required(VALIDATION_MESSAGES.PASSWORD.REQUIRED),\n});\n\n/* The code is defining a validation schema using the Yup library for a company form. The schema\nspecifies the validation rules for the companyName and companyBio fields. */\nexport const COMPANY_VALIDATION_SCHEMA = Yup.object({\n\tcompanyName: Yup.string()\n\t\t.required(VALIDATION_MESSAGES.COMPANY.REQUIRED)\n\t\t.min(NUMBER.FIVE, VALIDATION_MESSAGES.COMPANY.MIN_LENGTH),\n\n\tcompanyBio: Yup.string()\n\t\t.required(VALIDATION_MESSAGES.COMPANYBIO.REQUIRED)\n\t\t.min(NUMBER.FIVE, VALIDATION_MESSAGES.COMPANY.MIN_LENGTH),\n});\n\n/* The code is defining a validation schema using the Yup library for changing an email address. The\nschema specifies the validation rules for the username field, which represents the new email\naddress. */\nexport const CHANGE_EMAIL_VALIDATION_SCHEMA = Yup.object({\n\temail: Yup.string()\n\t\t.email(VALIDATION_MESSAGES.EMAIL.INVALID)\n\t\t.max(NUMBER.TWO_FIFTY)\n\t\t.required(VALIDATION_MESSAGES.EMAIL.REQUIRED)\n\t\t.matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i, VALIDATION_MESSAGES.EMAIL.INVALID),\n});\n\nexport const CHANGE_PASSWORD_VALIDATION_SCHEMA = Yup.object().shape({\n\tcurrentPassword: Yup.string().required(\"Current password is required\"),\n\n\tnewPassword: Yup.string()\n\t\t.required(VALIDATION_MESSAGES.NEWPASSWORD.REQUIRED)\n\t\t.min(NUMBER.EIGHT, VALIDATION_MESSAGES.NEWPASSWORD.MIN_LENGTH)\n\t\t.matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, VALIDATION_MESSAGES.NEWPASSWORD.MATCHPATTERN),\n\n\tconfirmNewPassword: Yup.string()\n\t\t.required(VALIDATION_MESSAGES.CONFIRMNEWPASSWORD.REQUIRED)\n\t\t.oneOf([Yup.ref(\"newPassword\")], VALIDATION_MESSAGES.CONFIRMNEWPASSWORD.MATCHPATTERN),\n});\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,mBAAmB,QAAQ,sBAAsB;;AAE1D;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAGF,GAAG,CAACG,MAAM,CAAC;EACjDC,QAAQ,EAAEJ,GAAG,CAACK,MAAM,CAAC;EACpB;EAAA,CACCC,GAAG,CAACP,MAAM,CAACQ,SAAS,CAAC,CACrBC,QAAQ,CAACP,mBAAmB,CAACQ,KAAK,CAACC,QAAQ,CAAC;EAC9C;EACA;EACA;EACA;EACAC,QAAQ,EAAEX,GAAG,CAACK,MAAM,CAAC;EACpB;EAAA,CACCG,QAAQ,CAACP,mBAAmB,CAACW,QAAQ,CAACF,QAAQ;AACjD,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMG,yBAAyB,GAAGb,GAAG,CAACG,MAAM,CAAC;EACnDW,WAAW,EAAEd,GAAG,CAACK,MAAM,CAAC,CAAC,CACvBG,QAAQ,CAACP,mBAAmB,CAACc,OAAO,CAACL,QAAQ,CAAC,CAC9CM,GAAG,CAACjB,MAAM,CAACkB,IAAI,EAAEhB,mBAAmB,CAACc,OAAO,CAACG,UAAU,CAAC;EAE1DC,UAAU,EAAEnB,GAAG,CAACK,MAAM,CAAC,CAAC,CACtBG,QAAQ,CAACP,mBAAmB,CAACmB,UAAU,CAACV,QAAQ,CAAC,CACjDM,GAAG,CAACjB,MAAM,CAACkB,IAAI,EAAEhB,mBAAmB,CAACc,OAAO,CAACG,UAAU;AAC1D,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,MAAMG,8BAA8B,GAAGrB,GAAG,CAACG,MAAM,CAAC;EACxDmB,KAAK,EAAEtB,GAAG,CAACK,MAAM,CAAC,CAAC,CACjBiB,KAAK,CAACrB,mBAAmB,CAACQ,KAAK,CAACc,OAAO,CAAC,CACxCjB,GAAG,CAACP,MAAM,CAACQ,SAAS,CAAC,CACrBC,QAAQ,CAACP,mBAAmB,CAACQ,KAAK,CAACC,QAAQ,CAAC,CAC5Cc,OAAO,CAAC,0CAA0C,EAAEvB,mBAAmB,CAACQ,KAAK,CAACc,OAAO;AACxF,CAAC,CAAC;AAEF,OAAO,MAAME,iCAAiC,GAAGzB,GAAG,CAACG,MAAM,CAAC,CAAC,CAACuB,KAAK,CAAC;EACnEC,eAAe,EAAE3B,GAAG,CAACK,MAAM,CAAC,CAAC,CAACG,QAAQ,CAAC,8BAA8B,CAAC;EAEtEoB,WAAW,EAAE5B,GAAG,CAACK,MAAM,CAAC,CAAC,CACvBG,QAAQ,CAACP,mBAAmB,CAAC4B,WAAW,CAACnB,QAAQ,CAAC,CAClDM,GAAG,CAACjB,MAAM,CAAC+B,KAAK,EAAE7B,mBAAmB,CAAC4B,WAAW,CAACX,UAAU,CAAC,CAC7DM,OAAO,CAAC,iCAAiC,EAAEvB,mBAAmB,CAAC4B,WAAW,CAACE,YAAY,CAAC;EAE1FC,kBAAkB,EAAEhC,GAAG,CAACK,MAAM,CAAC,CAAC,CAC9BG,QAAQ,CAACP,mBAAmB,CAACgC,kBAAkB,CAACvB,QAAQ,CAAC,CACzDwB,KAAK,CAAC,CAAClC,GAAG,CAACmC,GAAG,CAAC,aAAa,CAAC,CAAC,EAAElC,mBAAmB,CAACgC,kBAAkB,CAACF,YAAY;AACtF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}